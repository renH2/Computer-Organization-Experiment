////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : myALU_drc.vf
// /___/   /\     Timestamp : 11/11/2019 13:27:00
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: C:\Xilinx\14.7\ISE_DS\ISE\bin\nt64\unwrapped\sch2hdl.exe -intstyle ise -family kintex7 -verilog myALU_drc.vf -w "E:/3180105388/lab 8/MyALU/myALU.sch"
//Design Name: myALU
//Device: kintex7
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 1ns / 1ps

module myOr2b4_MUSER_myALU(A, 
                           B, 
                           C);

    input [3:0] A;
    input [3:0] B;
   output [3:0] C;
   
   
   OR2  XLXI_1 (.I0(B[0]), 
               .I1(A[0]), 
               .O(C[0]));
   OR2  XLXI_2 (.I0(B[1]), 
               .I1(A[1]), 
               .O(C[1]));
   OR2  XLXI_3 (.I0(B[2]), 
               .I1(A[2]), 
               .O(C[2]));
   OR2  XLXI_4 (.I0(B[3]), 
               .I1(A[3]), 
               .O(C[3]));
endmodule
`timescale 1ns / 1ps

module myAnd2b4_MUSER_myALU(A, 
                            B, 
                            C);

    input [3:0] A;
    input [3:0] B;
   output [3:0] C;
   
   
   AND2  XLXI_1 (.I0(B[0]), 
                .I1(A[0]), 
                .O(C[0]));
   AND2  XLXI_2 (.I0(B[1]), 
                .I1(A[1]), 
                .O(C[1]));
   AND2  XLXI_3 (.I0(B[2]), 
                .I1(A[2]), 
                .O(C[2]));
   AND2  XLXI_4 (.I0(B[3]), 
                .I1(A[3]), 
                .O(C[3]));
endmodule
`timescale 1ns / 1ps

module Mux4to1_MUSER_myALU(I0, 
                           I1, 
                           I2, 
                           I3, 
                           s, 
                           o);

    input I0;
    input I1;
    input I2;
    input I3;
    input [1:0] s;
   output o;
   
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_14;
   wire XLXN_15;
   wire XLXN_16;
   wire XLXN_17;
   wire XLXN_23;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_26;
   
   INV  XLXI_1 (.I(s[1]), 
               .O(XLXN_5));
   INV  XLXI_2 (.I(s[0]), 
               .O(XLXN_6));
   AND2  XLXI_3 (.I0(XLXN_6), 
                .I1(XLXN_5), 
                .O(XLXN_14));
   AND2  XLXI_4 (.I0(s[0]), 
                .I1(XLXN_5), 
                .O(XLXN_15));
   AND2  XLXI_5 (.I0(s[1]), 
                .I1(XLXN_6), 
                .O(XLXN_16));
   AND2  XLXI_6 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_17));
   AND2  XLXI_7 (.I0(I0), 
                .I1(XLXN_14), 
                .O(XLXN_23));
   AND2  XLXI_8 (.I0(I1), 
                .I1(XLXN_15), 
                .O(XLXN_24));
   AND2  XLXI_9 (.I0(I2), 
                .I1(XLXN_16), 
                .O(XLXN_25));
   AND2  XLXI_10 (.I0(I3), 
                 .I1(XLXN_17), 
                 .O(XLXN_26));
   OR4  XLXI_11 (.I0(XLXN_26), 
                .I1(XLXN_25), 
                .I2(XLXN_24), 
                .I3(XLXN_23), 
                .O(o));
endmodule
`timescale 1ns / 1ps

module Mux4to14b_MUSER_myALU(I0, 
                             I1, 
                             I2, 
                             I3, 
                             s, 
                             o);

    input [3:0] I0;
    input [3:0] I1;
    input [3:0] I2;
    input [3:0] I3;
    input [1:0] s;
   output [3:0] o;
   
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_16;
   wire XLXN_20;
   wire XLXN_24;
   wire XLXN_28;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_63;
   wire XLXN_64;
   wire XLXN_65;
   wire XLXN_66;
   wire XLXN_67;
   wire XLXN_68;
   wire XLXN_70;
   wire XLXN_71;
   wire XLXN_72;
   wire XLXN_73;
   
   INV  XLXI_2 (.I(s[0]), 
               .O(XLXN_9));
   INV  XLXI_3 (.I(s[1]), 
               .O(XLXN_8));
   AND2  XLXI_6 (.I0(XLXN_9), 
                .I1(XLXN_8), 
                .O(XLXN_16));
   AND2  XLXI_7 (.I0(s[0]), 
                .I1(XLXN_8), 
                .O(XLXN_20));
   AND2  XLXI_8 (.I0(s[1]), 
                .I1(XLXN_9), 
                .O(XLXN_24));
   AND2  XLXI_9 (.I0(s[1]), 
                .I1(s[0]), 
                .O(XLXN_28));
   AND2  XLXI_10 (.I0(I0[0]), 
                 .I1(XLXN_16), 
                 .O(XLXN_57));
   AND2  XLXI_11 (.I0(I1[0]), 
                 .I1(XLXN_20), 
                 .O(XLXN_58));
   AND2  XLXI_12 (.I0(I2[0]), 
                 .I1(XLXN_24), 
                 .O(XLXN_59));
   AND2  XLXI_13 (.I0(I3[0]), 
                 .I1(XLXN_28), 
                 .O(XLXN_60));
   AND2  XLXI_14 (.I0(I0[1]), 
                 .I1(XLXN_16), 
                 .O(XLXN_61));
   AND2  XLXI_15 (.I0(I1[1]), 
                 .I1(XLXN_20), 
                 .O(XLXN_62));
   AND2  XLXI_16 (.I0(I2[1]), 
                 .I1(XLXN_24), 
                 .O(XLXN_63));
   AND2  XLXI_17 (.I0(I3[1]), 
                 .I1(XLXN_28), 
                 .O(XLXN_64));
   AND2  XLXI_18 (.I0(I0[2]), 
                 .I1(XLXN_16), 
                 .O(XLXN_65));
   AND2  XLXI_19 (.I0(I1[2]), 
                 .I1(XLXN_20), 
                 .O(XLXN_66));
   AND2  XLXI_20 (.I0(I2[2]), 
                 .I1(XLXN_24), 
                 .O(XLXN_67));
   AND2  XLXI_22 (.I0(I3[2]), 
                 .I1(XLXN_28), 
                 .O(XLXN_68));
   AND2  XLXI_23 (.I0(I0[3]), 
                 .I1(XLXN_16), 
                 .O(XLXN_70));
   AND2  XLXI_24 (.I0(I1[3]), 
                 .I1(XLXN_20), 
                 .O(XLXN_71));
   AND2  XLXI_25 (.I0(I2[3]), 
                 .I1(XLXN_24), 
                 .O(XLXN_72));
   AND2  XLXI_26 (.I0(I3[3]), 
                 .I1(XLXN_28), 
                 .O(XLXN_73));
   OR4  XLXI_27 (.I0(XLXN_60), 
                .I1(XLXN_59), 
                .I2(XLXN_58), 
                .I3(XLXN_57), 
                .O(o[0]));
   OR4  XLXI_28 (.I0(XLXN_64), 
                .I1(XLXN_63), 
                .I2(XLXN_62), 
                .I3(XLXN_61), 
                .O(o[1]));
   OR4  XLXI_29 (.I0(XLXN_68), 
                .I1(XLXN_67), 
                .I2(XLXN_66), 
                .I3(XLXN_65), 
                .O(o[2]));
   OR4  XLXI_30 (.I0(XLXN_73), 
                .I1(XLXN_72), 
                .I2(XLXN_71), 
                .I3(XLXN_70), 
                .O(o[3]));
endmodule
`timescale 1ns / 1ps

module myALU(A, 
             B, 
             S, 
             C, 
             Co);

    input [3:0] A;
    input [3:0] B;
    input [1:0] S;
   output [3:0] C;
   output Co;
   
   wire [3:0] XLXN_13;
   wire XLXN_17;
   wire XLXN_18;
   wire [3:0] XLXN_20;
   wire [3:0] XLXN_21;
   
   AddSub4b  XLXI_1 (.A(A[3:0]), 
                    .B(B[3:0]), 
                    .Ctrl(S[0]), 
                    .Co(XLXN_17), 
                    .S(XLXN_13[3:0]));
   Mux4to14b_MUSER_myALU  XLXI_2 (.I0(XLXN_13[3:0]), 
                                 .I1(XLXN_13[3:0]), 
                                 .I2(XLXN_20[3:0]), 
                                 .I3(XLXN_21[3:0]), 
                                 .s(S[1:0]), 
                                 .o(C[3:0]));
   Mux4to1_MUSER_myALU  XLXI_3 (.I0(XLXN_17), 
                               .I1(XLXN_17), 
                               .I2(XLXN_18), 
                               .I3(XLXN_18), 
                               .s(S[1:0]), 
                               .o(Co));
   myAnd2b4_MUSER_myALU  XLXI_4 (.A(A[3:0]), 
                                .B(B[3:0]), 
                                .C(XLXN_20[3:0]));
   myOr2b4_MUSER_myALU  XLXI_5 (.A(A[3:0]), 
                               .B(B[3:0]), 
                               .C(XLXN_21[3:0]));
   GND  XLXI_6 (.G(XLXN_18));
endmodule
